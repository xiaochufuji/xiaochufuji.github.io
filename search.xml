<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CJSON implement(json解析器 c语言的实现)</title>
      <link href="/2021/12/24/cjson/cjson/"/>
      <url>/2021/12/24/cjson/cjson/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CJSON-implement-json解析器-c语言的实现"><a href="#CJSON-implement-json解析器-c语言的实现" class="headerlink" title="CJSON implement(json解析器 c语言的实现)"></a>CJSON implement(json解析器 c语言的实现)</h1><p>项目代码地址：</p><p><a href="https://github.com/xiaochufuji/cJSON.git">https://github.com/xiaochufuji/cJSON.git</a></p><p>思路参考：</p><p><a href="https://github.com/510850111/cJSON">https://github.com/510850111/cJSON</a></p><h2 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h2><p>[TOC]</p><h2 id="json介绍"><a href="#json介绍" class="headerlink" title="json介绍"></a>json介绍</h2><p><a href="https://baike.baidu.com/item/JSON">JSON</a>(<a href="https://baike.baidu.com/item/JavaScript">JavaScript</a> Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 <a href="https://baike.baidu.com/item/ECMAScript">ECMAScript</a> (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>由于本人近期在研究一个服务器的小项目，因此需要用到json格式的数据解析，所以实现了一遍，代码不算多，思路也不太难，也就是跟踪字符指针，逐字分析即可。</p><p>项目写到了大多数json格式的数据的大多数方法，比如解析，打印格式化后的数据，对json数据增删改查节点等，至于时常用到的jsondata[“key”]的这种用法，在C语言中无法实现，因为C语言无法对[]这种操作符进行重载。实际操作可以把代码导入到C++中，或者用C++重写一遍，再使用C++代码对[]进行操作符重载即可。</p><p>由于代码在本处显示不方便，建议去github把代码拉到本地查看。这里只给出项目的头文件。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>首先，你所有创建的节点都是安全的（其实只有前1024个），你只需要在程序最后的地方调用exitSafe()即可。</p><ol><li>你可以对一个字符串解析成json格式的数据，会返回一个json格式的指针。</li><li>你可以将一个json格式的指针，以字符串格式输出，会返回一个字符类型的指针，当然如果拿到这个指针，你必须手动对指针内容进行释放。</li><li>如果解析过程出错，会提示在哪里出错，当然的，你也可以通过getErrorPosition()拿到该指针。</li><li>你可以通过修改头文件中的宏定义ISFORMAT来指定输出的json字符串是否经过格式化，1则为需要格式化，0则不需要。</li><li>你可以通过修改头文件中的宏定义ISCASESENSITIVE来指定json数据节点比对时的策略（是否区分大小写），1则为区分大小写，0则不需要。 不区分大小写的情况如下：”aaaa“==”AaAa”。</li></ol><p>综上：</p><ol><li>cJSON *root = parse(string);    // 解析成json数据</li><li>print(…);    // 直接把json数据打印成字符串</li><li><p>char* data = dumpJson();    // 拿到json数据打印的字符串，但需要手动释放字符串内容</p></li><li><p>char* ep = getErrorPosition();    // 解析错误的时候，拿到解析错误时的位置</p></li><li>exitSafe();    // 程序结尾加上这个，内存就不会泄露</li></ol><p>用到的都是C标准库的函数，所以可以放心使用。其他用到的工具在<a href="#what I use">what I use</a>。</p><h2 id="头文件cjson-h"><a href="#头文件cjson-h" class="headerlink" title="头文件cjson.h"></a>头文件cjson.h</h2><p>测试结果在<a href="#the following content is what test file display"><strong><em>the following content is what test file display</em></strong></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __CJSON_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __CJOSN_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;float.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************************************************</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  usage: you can just use parse a string to a json object like: cJSON *root = parse(string);</span></span><br><span class="line"><span class="comment"> *         and you can just use exitSafe(); to exit safely because there is a list that is storing</span></span><br><span class="line"><span class="comment"> *         all the node&#x27;s address, and you can call exitSafe() to release them all;</span></span><br><span class="line"><span class="comment"> *         1. cJSON *root = parse(string);</span></span><br><span class="line"><span class="comment"> *         2. print(...);                   // just parse the json data to console</span></span><br><span class="line"><span class="comment"> *         3. .........                     // do some process to json data in memory</span></span><br><span class="line"><span class="comment"> *         4. char* data = dumpJson();      // you can dump the json from memory</span></span><br><span class="line"><span class="comment"> *         5. char* ep = getErrorPosition();// you can get the error position when parsing</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  tips:  1. if you use dumpJson(), you must manually release the string by yourself;</span></span><br><span class="line"><span class="comment"> *         2. if you dont want to get a format json string, you can change the Macro ISFORMAT to 0.</span></span><br><span class="line"><span class="comment"> *         ISFORMAT  1    &lt;----&gt;    FORMAT JSON OUTPUT</span></span><br><span class="line"><span class="comment"> *         ISFORMAT  0    &lt;----&gt;    WITHOUT FORMAT OUTPUT</span></span><br><span class="line"><span class="comment"> *         </span></span><br><span class="line"><span class="comment"> *         3. if you want to distinguish uppercase and lowercase, you can change the macro </span></span><br><span class="line"><span class="comment"> *         ISCASESENSITIVE</span></span><br><span class="line"><span class="comment"> *         ISCASESENSITIVE 1    &lt;----&gt;    key value &quot;AAABBB&quot; is different from &quot;aaabbb&quot;</span></span><br><span class="line"><span class="comment"> *         ISCASESENSITIVE 0    &lt;----&gt;    key value &quot;aaaBbB&quot; is same to &quot;AAAbbb&quot;/&quot;aaABbb&quot;...</span></span><br><span class="line"><span class="comment"> *     </span></span><br><span class="line"><span class="comment"> *  There is hardly memory leak in the program because there no memory leak when I test it, </span></span><br><span class="line"><span class="comment"> *  so you can use safely!!!</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> ***************************************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISFORMAT 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISCASESENSITIVE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ifBadMalloc(ptr) \</span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">if</span> (!ptr)            \</span></span><br><span class="line"><span class="meta">    &#123; <span class="comment">/* bad malloc */</span>   \</span></span><br><span class="line"><span class="meta">        return NULL;     \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ifBadParse(ptr)        \</span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">if</span> (!ptr)                  \</span></span><br><span class="line"><span class="meta">    &#123; <span class="comment">/* bad parse position */</span> \</span></span><br><span class="line"><span class="meta">        return NULL;           \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ifNullPtr(ptr)                        \</span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">if</span> (!ptr)                                 \</span></span><br><span class="line"><span class="meta">    &#123; <span class="comment">/* recursion could return a null ptr */</span> \</span></span><br><span class="line"><span class="meta">        return NULL;                          \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> voidIfNullPtr(ptr)                    \</span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">if</span> (!ptr)                                 \</span></span><br><span class="line"><span class="meta">    &#123; <span class="comment">/* recursion could return a null ptr */</span> \</span></span><br><span class="line"><span class="meta">        return;                               \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ISFORMAT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORMAT (1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORMAT (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">cJSONType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    cJSON_FALSE,</span><br><span class="line">    cJSON_TRUE,</span><br><span class="line">    cJSON_NULL,</span><br><span class="line">    cJSON_NUMBER,</span><br><span class="line">    cJSON_STRING,</span><br><span class="line">    cJSON_ARRAY,</span><br><span class="line">    cJSON_OBJECT,</span><br><span class="line">&#125; cJSONType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">stringType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    keyType,</span><br><span class="line">    dataType,</span><br><span class="line">&#125; stringType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">cJSON</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/* pointer */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cJSON</span> *<span class="title">next</span>, *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cJSON</span> *<span class="title">child</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    <span class="keyword">char</span> *key;</span><br><span class="line">    <span class="keyword">char</span> *stringVal;</span><br><span class="line">    <span class="keyword">int</span> intVal;</span><br><span class="line">    <span class="keyword">double</span> doubleVal;</span><br><span class="line"></span><br><span class="line">    cJSONType type;</span><br><span class="line">&#125; cJSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> cJSON *cjsonList[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">size_t</span> registedNode = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *errorPoistion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************************************</span></span><br><span class="line"><span class="comment"> *  all function here</span></span><br><span class="line"><span class="comment"> *  include parse / print json format content</span></span><br><span class="line"><span class="comment"> *  and create, delete json node, remove, insert, replace node...</span></span><br><span class="line"><span class="comment"> *******************************************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exitSafe</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">getErrorPosition</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * create and delete node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">cJSON *<span class="title">newCjsonNode</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteCjsonNode</span><span class="params">(cJSON *node)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeNodePtrFromList</span><span class="params">(cJSON *node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * parse a string to json format</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">cJSON *<span class="title">parse</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *parseString)</span></span>;</span><br><span class="line"><span class="function">cJSON *<span class="title">parseWithOpts</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *parseString, <span class="keyword">const</span> <span class="keyword">char</span> **parseEnd, <span class="keyword">int</span> justVerity)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">skip</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *position)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">parseValue</span><span class="params">(cJSON *node, <span class="keyword">const</span> <span class="keyword">char</span> *value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">parseValueString</span><span class="params">(cJSON *node, <span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">string</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">parseValueNumber</span><span class="params">(cJSON *node, <span class="keyword">const</span> <span class="keyword">char</span> *number)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">parseValueArray</span><span class="params">(cJSON *node, <span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">array</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">parseValueObject</span><span class="params">(cJSON *node, <span class="keyword">const</span> <span class="keyword">char</span> *object)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * print a json as a string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">dumpJson</span><span class="params">(cJSON *root)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(cJSON *root)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">printValue</span><span class="params">(cJSON *node, <span class="keyword">int</span> depth, <span class="keyword">int</span> isFormat)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">deepCopyConstString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *FTNSting)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">printString</span><span class="params">(cJSON *node, stringType type)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">printNumber</span><span class="params">(cJSON *node)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">printArray</span><span class="params">(cJSON *node, <span class="keyword">int</span> depth, <span class="keyword">int</span> isFormat)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">printObject</span><span class="params">(cJSON *node, <span class="keyword">int</span> depth, <span class="keyword">int</span> isFormat)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * create a new json node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">cJSON *<span class="title">createFalseNode</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">cJSON *<span class="title">createTrueNode</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">cJSON *<span class="title">createNullNode</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">cJSON *<span class="title">createStringNode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">string</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setKey</span><span class="params">(cJSON *nodeDst, <span class="keyword">const</span> <span class="keyword">char</span> *key)</span></span>;</span><br><span class="line"><span class="function">cJSON *<span class="title">createNumberNode</span><span class="params">(<span class="keyword">double</span> number)</span></span>;</span><br><span class="line"><span class="function">cJSON *<span class="title">createArrayNode</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">cJSON *<span class="title">createObjectNode</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * add child to array or object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addNode2Array</span><span class="params">(cJSON *nodeDst, cJSON *nodeSrc)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addNode2Object</span><span class="params">(cJSON *nodeDst, cJSON *nodeSrc, <span class="keyword">const</span> <span class="keyword">char</span> *key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * string compare, 0 is same, others is different</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">keyCmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s1, <span class="keyword">const</span> <span class="keyword">char</span> *s2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * if two node same, if it has key judge by key!! otherwise judge the data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ifSame</span><span class="params">(<span class="keyword">const</span> cJSON *c1, <span class="keyword">const</span> cJSON *c2)</span></span>;</span><br><span class="line"><span class="function">cJSON *<span class="title">judgeIfHasThisNode</span><span class="params">(cJSON *root, cJSON *judge)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * find sub node in the root node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">cJSON *<span class="title">getSubNodeInArrayByIndex</span><span class="params">(cJSON *root, <span class="keyword">int</span> which)</span></span>;</span><br><span class="line"><span class="function">cJSON *<span class="title">getSubNodeInObjectByIndex</span><span class="params">(cJSON *root, <span class="keyword">int</span> which)</span></span>;</span><br><span class="line"><span class="function">cJSON *<span class="title">getSubNodeInObjectByKey</span><span class="params">(cJSON *root, <span class="keyword">const</span> <span class="keyword">char</span> *key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * remove child from array or object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">cJSON *<span class="title">detachNodeFromArrayByIndex</span><span class="params">(cJSON *node, <span class="keyword">int</span> which)</span></span>;</span><br><span class="line"><span class="function">cJSON *<span class="title">detachNodeFromObjectByIndex</span><span class="params">(cJSON *node, <span class="keyword">int</span> which)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeNodeFromArrayByIndex</span><span class="params">(cJSON *node, <span class="keyword">int</span> which)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeNodeFromObjectByIndex</span><span class="params">(cJSON *node, <span class="keyword">int</span> which)</span></span>;</span><br><span class="line"><span class="function">cJSON *<span class="title">detachNodeFromObjectByKey</span><span class="params">(cJSON *node, <span class="keyword">const</span> <span class="keyword">char</span> *key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeNodeFromObjectByKey</span><span class="params">(cJSON *node, <span class="keyword">const</span> <span class="keyword">char</span> *key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * insert</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNode2Array</span><span class="params">(cJSON *nodeDst, cJSON *nodeSrc, <span class="keyword">int</span> which)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNode2Object</span><span class="params">(cJSON *nodeDst, cJSON *nodeSrc, <span class="keyword">int</span> which)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * replace</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaceNode2ArrayByIndex</span><span class="params">(cJSON *nodeDst, cJSON *nodeSrc, <span class="keyword">int</span> which)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaceNode2ObjectByIndex</span><span class="params">(cJSON *nodeDst, cJSON *nodeSrc, <span class="keyword">int</span> which)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaceNode2ObjectByKey</span><span class="params">(cJSON *nodeDst, cJSON *nodeSrc, <span class="keyword">const</span> <span class="keyword">char</span> *key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="what-I-use"><a href="#what-I-use" class="headerlink" title="what I use"></a><em>what I use</em></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MINGW64 8.1.0</span><br><span class="line">vscode</span><br><span class="line">git bash 4.4.23(1)</span><br><span class="line">cmake 3.20.6</span><br><span class="line"></span><br><span class="line">so the <span class="built_in">command</span> i use when cmake <span class="keyword">in</span> build/ is</span><br><span class="line">`cmake -G <span class="string">&quot;MinGW Makefiles&quot;</span> ..`</span><br><span class="line">the <span class="built_in">command</span> i use when makefile <span class="keyword">in</span> build/ is </span><br><span class="line">`mingw32-make`</span><br><span class="line">and run the program <span class="string">&#x27;../bin/main&#x27;</span> <span class="keyword">if</span> you are <span class="keyword">in</span> the directory build/</span><br></pre></td></tr></table></figure><h2 id="the-following-content-is-what-test-file-display"><a href="#the-following-content-is-what-test-file-display" class="headerlink" title="the following content is what test file display"></a><strong><em>the following content is what test file display</em></strong></h2><h3 id="display-1st"><a href="#display-1st" class="headerlink" title="display 1st"></a>display 1st</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="number">123</span>,</span><br><span class="line">        <span class="attr">&quot;key value&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;01string&quot;</span>,</span><br><span class="line">                <span class="string">&quot;02string&quot;</span>,</span><br><span class="line">                <span class="number">123.456000</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="attr">&quot;array object&quot;</span>: <span class="string">&quot;nice&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                [</span><br><span class="line">                        <span class="literal">false</span>,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        <span class="literal">true</span></span><br><span class="line">                ]</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="display-2nd"><a href="#display-2nd" class="headerlink" title="display 2nd:"></a>display 2nd:</h3><p><code>addNode2Object(json, a, &quot;a key&quot;);</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="number">123</span>,</span><br><span class="line">        <span class="attr">&quot;key value&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;01string&quot;</span>,</span><br><span class="line">                <span class="string">&quot;02string&quot;</span>,</span><br><span class="line">                <span class="number">123.456000</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="attr">&quot;array object&quot;</span>: <span class="string">&quot;nice&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                [</span><br><span class="line">                        <span class="literal">false</span>,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        <span class="literal">true</span></span><br><span class="line">                ]</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;a key&quot;</span>: <span class="string">&quot;a string&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="display-3rd"><a href="#display-3rd" class="headerlink" title="display 3rd:"></a>display 3rd:</h3><p><code>addNode2Array(json-&gt;child-&gt;next, b);</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="number">123</span>,</span><br><span class="line">        <span class="attr">&quot;key value&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;01string&quot;</span>,</span><br><span class="line">                <span class="string">&quot;02string&quot;</span>,</span><br><span class="line">                <span class="number">123.456000</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="attr">&quot;array object&quot;</span>: <span class="string">&quot;nice&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                [</span><br><span class="line">                        <span class="literal">false</span>,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        <span class="literal">true</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="number">234.567000</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;a key&quot;</span>: <span class="string">&quot;a string&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="display-4th"><a href="#display-4th" class="headerlink" title="display 4th:"></a>display 4th:</h3><p><code>cJSON *c = detachNodeFromArrayByIndex(json-&gt;child-&gt;next, 1);</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;02string&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="number">123</span>,</span><br><span class="line">        <span class="attr">&quot;key value&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;01string&quot;</span>,</span><br><span class="line">                <span class="number">123.456000</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="attr">&quot;array object&quot;</span>: <span class="string">&quot;nice&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                [</span><br><span class="line">                        <span class="literal">false</span>,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        <span class="literal">true</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="number">234.567000</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;a key&quot;</span>: <span class="string">&quot;a string&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="display-5th"><a href="#display-5th" class="headerlink" title="display 5th:"></a>display 5th:</h3><p><code>removeNodeFromObjectByIndex(json, 0);</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;key value&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;01string&quot;</span>,</span><br><span class="line">                <span class="number">123.456000</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="attr">&quot;array object&quot;</span>: <span class="string">&quot;nice&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                [</span><br><span class="line">                        <span class="literal">false</span>,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        <span class="literal">true</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="number">234.567000</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;a key&quot;</span>: <span class="string">&quot;a string&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="display-6th"><a href="#display-6th" class="headerlink" title="display 6th:"></a>display 6th:</h3><p><code>cJSON *d = detachNodeFromObjectByKey(json, &quot;a key&quot;);</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;a string&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;key value&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;01string&quot;</span>,</span><br><span class="line">                <span class="number">123.456000</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="attr">&quot;array object&quot;</span>: <span class="string">&quot;nice&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                [</span><br><span class="line">                        <span class="literal">false</span>,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        <span class="literal">true</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="number">234.567000</span></span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="display-7th"><a href="#display-7th" class="headerlink" title="display 7th:"></a>display 7th:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cJSON *e = createArrayNode();</span><br><span class="line">cJSON *f = createStringNode(<span class="string">&quot;insert to array&quot;</span>);</span><br><span class="line">cJSON *h = createNumberNode(<span class="number">8888</span>);</span><br><span class="line">insertNode2Array(e, f, <span class="number">0</span>);</span><br><span class="line">addNode2Array(e, h);</span><br><span class="line">setKey(e, <span class="string">&quot;new array node&quot;</span>);</span><br><span class="line">insertNode2Object(json, e, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>e block</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">        <span class="string">&quot;insert to array&quot;</span>,</span><br><span class="line">        <span class="number">8888</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;key value&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;01string&quot;</span>,</span><br><span class="line">                <span class="number">123.456000</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="attr">&quot;array object&quot;</span>: <span class="string">&quot;nice&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                [</span><br><span class="line">                        <span class="literal">false</span>,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        <span class="literal">true</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="number">234.567000</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;new array node&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;insert to array&quot;</span>,</span><br><span class="line">                <span class="number">8888</span></span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="display-8th"><a href="#display-8th" class="headerlink" title="display 8th:"></a>display 8th:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cJSON *i = createStringNode(<span class="string">&quot;replace the array node 8888&quot;</span>);</span><br><span class="line">replaceNode2ArrayByIndex(json-&gt;child-&gt;next, i, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;key value&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;01string&quot;</span>,</span><br><span class="line">                <span class="number">123.456000</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="attr">&quot;array object&quot;</span>: <span class="string">&quot;nice&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                [</span><br><span class="line">                        <span class="literal">false</span>,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        <span class="literal">true</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="number">234.567000</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;new array node&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;insert to array&quot;</span>,</span><br><span class="line">                <span class="string">&quot;replace the array node 8888&quot;</span></span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="display-9th"><a href="#display-9th" class="headerlink" title="display 9th:"></a>display 9th:</h3><p><code>replaceNode2ObjectByKey(json-&gt;child-&gt;child-&gt;next-&gt;next,d,&quot;array object&quot;);</code></p><p>use a node detached(cJSON pointer d) in the past, replace the string(key is “array object”)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;key value&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;01string&quot;</span>,</span><br><span class="line">                <span class="number">123.456000</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="attr">&quot;a key&quot;</span>: <span class="string">&quot;a string&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                [</span><br><span class="line">                        <span class="literal">false</span>,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        <span class="literal">true</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="number">234.567000</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;new array node&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;insert to array&quot;</span>,</span><br><span class="line">                <span class="string">&quot;replace the array node 8888&quot;</span></span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 C++11新特性的线程池</title>
      <link href="/2021/11/02/threadpool_c++/threadpool_c++/"/>
      <url>/2021/11/02/threadpool_c++/threadpool_c++/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基于C-11新特性的线程池"><a href="#基于C-11新特性的线程池" class="headerlink" title="基于C++11新特性的线程池"></a>基于C++11新特性的线程池</h1><p>线程池基于任务队列和固定数量线程组，减少线程开辟和销毁的开销，线程创建后等待取任务即可</p><blockquote><p>ThreadPool.hpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ThreadPool</span>() : <span class="built_in">ThreadPool</span>(<span class="number">10</span>) &#123;&#125;;</span><br><span class="line"><span class="built_in">ThreadPool</span>(<span class="keyword">int</span> maxThreadNum);</span><br><span class="line">~<span class="built_in">ThreadPool</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Func, <span class="keyword">typename</span>... Arg&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">addTask</span><span class="params">(Func&amp;&amp; func, Arg&amp;&amp;... arg)</span>-&gt;future&lt;<span class="title">decltype</span><span class="params">(func(arg...))</span>&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">using</span> taskType = function&lt;<span class="built_in"><span class="keyword">void</span></span>()&gt;;</span><br><span class="line">queue&lt;function&lt;<span class="keyword">void</span>()&gt; &gt; m_taskQueue;</span><br><span class="line">vector&lt;thread&gt; m_pool;</span><br><span class="line">mutex m_mutexQueue;</span><br><span class="line">atomic&lt;<span class="keyword">bool</span>&gt; is_shutdown;</span><br><span class="line">condition_variable m_cond;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Func, <span class="keyword">typename</span> ...Arg&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">ThreadPool::addTask</span><span class="params">(Func&amp;&amp; func, Arg &amp;&amp; ...arg)</span> -&gt; future&lt;<span class="title">decltype</span><span class="params">(func(arg ...))</span>&gt;</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> retType = <span class="keyword">decltype</span>(<span class="built_in">func</span>(arg...));</span><br><span class="line"><span class="keyword">auto</span> task = make_shared&lt;packaged_task&lt;<span class="built_in">retType</span>()&gt;&gt;</span><br><span class="line">(</span><br><span class="line"><span class="built_in">bind</span>(forward&lt;Func&gt;(func), forward&lt;Arg&gt;(arg)...)</span><br><span class="line">);</span><br><span class="line">future&lt;retType&gt; ret = task-&gt;<span class="built_in">get_future</span>();</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(m_mutexQueue)</span></span>;</span><br><span class="line">m_taskQueue.<span class="built_in">emplace</span>([task] &#123;</span><br><span class="line">(*task)();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">m_cond.<span class="built_in">notify_all</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>ThreadPool.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ThreadPool.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line">ThreadPool::<span class="built_in">ThreadPool</span>(<span class="keyword">int</span> maxThreadNum): <span class="built_in">is_shutdown</span>(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxThreadNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line">m_pool.<span class="built_in">emplace_back</span></span><br><span class="line">(</span><br><span class="line">[<span class="keyword">this</span>]</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line">taskType task;</span><br><span class="line">&#123;</span><br><span class="line">unique_lock&lt;mutex&gt; <span class="built_in">lock</span>(<span class="keyword">this</span>-&gt;m_mutexQueue);</span><br><span class="line"><span class="keyword">this</span>-&gt;m_cond.<span class="built_in">wait</span>(lock, [<span class="keyword">this</span>]</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;is_shutdown == <span class="literal">true</span> || <span class="keyword">this</span>-&gt;m_taskQueue.<span class="built_in">empty</span>() == <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;is_shutdown &amp;&amp; <span class="keyword">this</span>-&gt;m_taskQueue.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// end for thread</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// work for thread, pick up a task to work</span></span><br><span class="line">task = <span class="built_in">move</span>(<span class="keyword">this</span>-&gt;m_taskQueue.<span class="built_in">front</span>());</span><br><span class="line"><span class="keyword">this</span>-&gt;m_taskQueue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">task</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThreadPool::~<span class="built_in">ThreadPool</span>()</span><br><span class="line">&#123;</span><br><span class="line">is_shutdown = <span class="literal">true</span>;</span><br><span class="line">m_cond.<span class="built_in">notify_all</span>();</span><br><span class="line"><span class="keyword">for</span> (thread&amp; t : m_pool)</span><br><span class="line">&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试代码 main.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ThreadPool.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ThreadPool pool;</span><br><span class="line">    std::vector&lt; std::future&lt;<span class="keyword">int</span>&gt; &gt; results;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        results.<span class="built_in">emplace_back</span>(</span><br><span class="line">            pool.<span class="built_in">addTask</span>([i] &#123;</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;hello &quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">                std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;world &quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">                <span class="keyword">return</span> i * i;</span><br><span class="line">                &#125;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; result : results)</span><br><span class="line">        std::cout &lt;&lt; result.<span class="built_in">get</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
            <tag> 跨平台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++线程池</title>
      <link href="/2021/10/13/thread-2/thread-2/"/>
      <url>/2021/10/13/thread-2/thread-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><h1 id="1-任务队列类"><a href="#1-任务队列类" class="headerlink" title="1. 任务队列类"></a>1. 任务队列类</h1><h2 id="TaskQueue-hpp"><a href="#TaskQueue-hpp" class="headerlink" title="TaskQueue.hpp"></a>TaskQueue.hpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> callback = <span class="built_in"><span class="keyword">void</span></span>(*)(<span class="keyword">void</span>*);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Task</span>();<span class="comment">// 空任务</span></span><br><span class="line"><span class="built_in">Task</span>(callback func, <span class="keyword">void</span>* arg);<span class="comment">// 有参任务</span></span><br><span class="line">callback func;</span><br><span class="line"><span class="keyword">void</span>* arg;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TaskQueue</span>();</span><br><span class="line">~<span class="built_in">TaskQueue</span>();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addTask</span><span class="params">(Task&amp; task)</span></span>;<span class="comment">// 添加任务1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addTask</span><span class="params">(callback func, <span class="keyword">void</span>* arg)</span></span>;<span class="comment">// 添加任务2</span></span><br><span class="line"><span class="function">Task <span class="title">takeTask</span><span class="params">()</span></span>;<span class="comment">// 取出一个任务</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> m_TaskQueue.<span class="built_in">size</span>(); </span><br><span class="line">&#125;<span class="comment">// 获取任务队列大小</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::queue&lt;Task&gt; m_TaskQueue;<span class="comment">// 任务队列</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> m_queueMutex;<span class="comment">// 任务队列锁，任务队列为共享资源</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="TaskQueue-cpp"><a href="#TaskQueue-cpp" class="headerlink" title="TaskQueue.cpp"></a>TaskQueue.cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;TaskQueue.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line">Task::<span class="built_in">Task</span>()</span><br><span class="line">&#123;</span><br><span class="line">func = <span class="literal">nullptr</span>;</span><br><span class="line">arg = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Task::<span class="built_in">Task</span>(callback func, <span class="keyword">void</span>* arg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;func = func;</span><br><span class="line"><span class="keyword">this</span>-&gt;arg = arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TaskQueue::<span class="built_in">TaskQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TaskQueue::~<span class="built_in">TaskQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pthread_mutex_destroy</span>(&amp;m_queueMutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TaskQueue::addTask</span><span class="params">(Task&amp; task)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">pthread_mutex_lock</span>(&amp;m_queueMutex);</span><br><span class="line">m_TaskQueue.<span class="built_in">push</span>(task);</span><br><span class="line"><span class="built_in">pthread_mutex_unlock</span>(&amp;m_queueMutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TaskQueue::addTask</span><span class="params">(callback func, <span class="keyword">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">pthread_mutex_lock</span>(&amp;m_queueMutex);</span><br><span class="line">Task task;</span><br><span class="line">task.func = func;</span><br><span class="line">task.arg = arg;</span><br><span class="line">m_TaskQueue.<span class="built_in">push</span>(task);</span><br><span class="line"><span class="built_in">pthread_mutex_unlock</span>(&amp;m_queueMutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Task <span class="title">TaskQueue::takeTask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Task t;</span><br><span class="line"><span class="built_in">pthread_mutex_lock</span>(&amp;m_queueMutex);</span><br><span class="line"><span class="comment">// 如果队空， 则返回空</span></span><br><span class="line"><span class="keyword">if</span> (m_TaskQueue.<span class="built_in">size</span>() &gt; <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">t = m_TaskQueue.<span class="built_in">front</span>();</span><br><span class="line">m_TaskQueue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pthread_mutex_unlock</span>(&amp;m_queueMutex);</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-线程池类"><a href="#2-线程池类" class="headerlink" title="2. 线程池类"></a>2. 线程池类</h1><h2 id="ThreadPool-hpp"><a href="#ThreadPool-hpp" class="headerlink" title="ThreadPool.hpp"></a>ThreadPool.hpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;TaskQueue.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> u16 unsigned short</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> u32 unsigned long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> u16 maxMin = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUMBER = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(maxMin);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ThreadPool</span>()=<span class="keyword">delete</span>;<span class="comment">// 线程池无参构造函数(禁用)</span></span><br><span class="line"><span class="built_in">ThreadPool</span>(<span class="keyword">int</span> minThreadNum, <span class="keyword">int</span> maxThreadNum);<span class="comment">// 线程池有参构造函数</span></span><br><span class="line">~<span class="built_in">ThreadPool</span>();<span class="comment">// 线程池有参析构函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addTask</span><span class="params">(Task task)</span></span>;<span class="comment">// 添加任务1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addTask</span><span class="params">(callback func, <span class="keyword">void</span>* arg)</span></span>;<span class="comment">// 添加任务2</span></span><br><span class="line"><span class="function">u16 <span class="title">getBusyThreadNum</span><span class="params">()</span></span>;<span class="comment">// 获取忙线程数</span></span><br><span class="line"><span class="function">u16 <span class="title">getAliveThreadNum</span><span class="params">()</span></span>;<span class="comment">// 获取存活线程数</span></span><br><span class="line"><span class="function">u32 <span class="title">getQueueSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// 线程池属性</span></span><br><span class="line"><span class="keyword">bool</span> m_shutdown;</span><br><span class="line">u16 m_minThreadNum;<span class="comment">// 线程池最小线程数</span></span><br><span class="line">u16 m_maxThreadNum;<span class="comment">// 线程池最大线程数</span></span><br><span class="line">u16 m_busyThreadNum;<span class="comment">// 线程池在忙线程数</span></span><br><span class="line">u16 m_aliveThreadNum;<span class="comment">// 线程池存货线程数</span></span><br><span class="line">u16 m_exitThreadNum;<span class="comment">// 线程池需销毁线程数</span></span><br><span class="line"><span class="keyword">pthread_t</span> m_managerThreadID;<span class="comment">// 管理者线程ID，管理者用于生产线程，管理线程</span></span><br><span class="line"><span class="keyword">pthread_t</span>* m_workerThreadIDs;<span class="comment">// 工作者线程ID，工作者用于消费任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务队列实例</span></span><br><span class="line">TaskQueue *m_taskqueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程同步属性</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> m_busyThreadMutex;  <span class="comment">// 忙线程数锁</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> m_poolMutex;<span class="comment">// 当前线程池锁</span></span><br><span class="line"><span class="keyword">pthread_cond_t</span> m_consumerCond;<span class="comment">// 消费（任务）者条件变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">manager</span><span class="params">(<span class="keyword">void</span>* arg)</span></span>;<span class="comment">// 管理者</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">worker</span><span class="params">(<span class="keyword">void</span>* arg)</span></span>;<span class="comment">// 工作者</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exitCurrentThread</span><span class="params">()</span></span>;<span class="comment">// 退出当前线程</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ThreadPool-cpp"><a href="#ThreadPool-cpp" class="headerlink" title="ThreadPool.cpp"></a>ThreadPool.cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ThreadPool.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ThreadPool::<span class="built_in">ThreadPool</span>(<span class="keyword">int</span> minThreadNum, <span class="keyword">int</span> maxThreadNum):</span><br><span class="line">    <span class="built_in">m_minThreadNum</span>(<span class="keyword">static_cast</span>&lt;u16&gt;(minThreadNum)), <span class="built_in">m_maxThreadNum</span>(</span><br><span class="line">        <span class="keyword">static_cast</span>&lt;u16&gt;(maxThreadNum=minThreadNum+NUMBER&gt;=maxThreadNum?minThreadNum+NUMBER:maxThreadNum)</span><br><span class="line">    )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建任务队列</span></span><br><span class="line">    m_taskqueue = <span class="keyword">new</span> TaskQueue;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_taskqueue == <span class="literal">nullptr</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;task queue new failed...&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建工作者线程数组</span></span><br><span class="line">        m_workerThreadIDs = <span class="keyword">new</span> <span class="keyword">pthread_t</span>[maxThreadNum]();  <span class="comment">// 直接初始化为0，或者用下面的</span></span><br><span class="line">        <span class="comment">// memset(m_workerThreadIDs,0,(u32)maxThreadNum*sizeof(pthread_t));</span></span><br><span class="line">        <span class="built_in">memset</span>(m_workerThreadIDs, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">pthread_t</span>) * (u32)maxThreadNum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_workerThreadIDs == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;thread IDs new failed...&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化线程同步锁和条件变量</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pthread_mutex_init</span>(&amp;m_poolMutex, <span class="literal">nullptr</span>) != <span class="number">0</span> ||</span><br><span class="line">            <span class="built_in">pthread_mutex_init</span>(&amp;m_busyThreadMutex, <span class="literal">nullptr</span>) != <span class="number">0</span> ||</span><br><span class="line">            <span class="built_in">pthread_cond_init</span>(&amp;m_consumerCond, <span class="literal">nullptr</span>) != <span class="number">0</span></span><br><span class="line">            )</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;mutex init failed...&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化管理者线程</span></span><br><span class="line">        <span class="built_in">pthread_create</span>(&amp;m_managerThreadID, <span class="literal">nullptr</span>, manager, <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 初始化工作者线程，先创建最少的线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; minThreadNum; ++i) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">pthread_create</span>(&amp;m_workerThreadIDs[i], <span class="literal">nullptr</span>, worker, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        m_shutdown = <span class="literal">false</span>;</span><br><span class="line">        m_busyThreadNum = <span class="number">0</span>;</span><br><span class="line">        m_aliveThreadNum = m_minThreadNum;</span><br><span class="line">        m_exitThreadNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThreadPool::~<span class="built_in">ThreadPool</span>()</span><br><span class="line">&#123;</span><br><span class="line">    m_shutdown = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 阻塞资源回收</span></span><br><span class="line">    <span class="comment">// 销毁管理者线程</span></span><br><span class="line">    <span class="built_in">pthread_join</span>(m_managerThreadID, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 唤醒阻塞线程并让其自杀</span></span><br><span class="line">    <span class="keyword">for</span> (u16 i = <span class="number">0</span>; i &lt; <span class="built_in">getAliveThreadNum</span>(); ++i) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pthread_cond_signal</span>(&amp;m_consumerCond);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放堆区资源</span></span><br><span class="line">    <span class="keyword">if</span> (m_taskqueue) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_taskqueue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_workerThreadIDs) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] m_workerThreadIDs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放锁资源</span></span><br><span class="line">    <span class="built_in">pthread_cond_destroy</span>(&amp;m_consumerCond);</span><br><span class="line">    <span class="built_in">pthread_mutex_destroy</span>(&amp;m_poolMutex);</span><br><span class="line">    <span class="built_in">pthread_mutex_destroy</span>(&amp;m_busyThreadMutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ThreadPool::addTask</span><span class="params">(Task task)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_shutdown)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_taskqueue-&gt;<span class="built_in">addTask</span>(task);</span><br><span class="line">    <span class="built_in">pthread_cond_signal</span>(&amp;m_consumerCond);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ThreadPool::addTask</span><span class="params">(callback func, <span class="keyword">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">addTask</span>(<span class="built_in">Task</span>(func, arg));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">u16 <span class="title">ThreadPool::getBusyThreadNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u16 busyThreadNum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;m_busyThreadMutex);</span><br><span class="line">    busyThreadNum = <span class="keyword">this</span>-&gt;m_busyThreadNum;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;m_busyThreadMutex);</span><br><span class="line">    <span class="keyword">return</span> busyThreadNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">u16 <span class="title">ThreadPool::getAliveThreadNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u16 aliveThreadNum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;m_poolMutex);</span><br><span class="line">    aliveThreadNum = <span class="keyword">this</span>-&gt;m_aliveThreadNum;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;m_poolMutex);</span><br><span class="line">    <span class="keyword">return</span> aliveThreadNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">u32 <span class="title">ThreadPool::getQueueSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_taskqueue-&gt;<span class="built_in">getSize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">ThreadPool::manager</span><span class="params">(<span class="keyword">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ThreadPool* pool = (ThreadPool*)arg;</span><br><span class="line">    <span class="comment">// 隔10ms扫描一次</span></span><br><span class="line">    <span class="keyword">while</span> (!pool-&gt;m_shutdown)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">usleep</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 获取存活线程数，忙线程数</span></span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;pool-&gt;m_busyThreadMutex);</span><br><span class="line">        u16 busyThreadNum = pool-&gt;m_busyThreadNum;</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_busyThreadMutex);</span><br><span class="line">        u16 aliveThreadNum = pool-&gt;m_aliveThreadNum;</span><br><span class="line">        u16 maxThreadNum = pool-&gt;m_maxThreadNum;</span><br><span class="line">        u16 minThreadNum = pool-&gt;m_minThreadNum;</span><br><span class="line">        u32 taskNum = pool-&gt;<span class="built_in">getQueueSize</span>();</span><br><span class="line">        <span class="comment">// 如果任务太多就创建新线程（NUMBER个）</span></span><br><span class="line">        <span class="keyword">if</span> (aliveThreadNum &lt; maxThreadNum &amp;&amp; aliveThreadNum &lt; taskNum)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxThreadNum &amp;&amp; counter &lt; NUMBER &amp;&amp;</span><br><span class="line">                pool-&gt;m_aliveThreadNum &lt; maxThreadNum; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (pool-&gt;m_workerThreadIDs[i] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">pthread_create</span>(&amp;pool-&gt;m_workerThreadIDs[i], <span class="literal">nullptr</span>, worker, pool);</span><br><span class="line">                    pool-&gt;m_aliveThreadNum++;</span><br><span class="line">                    ++counter;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果线程太多就销毁线程（NUMBER个）</span></span><br><span class="line">        <span class="keyword">if</span> (aliveThreadNum &gt; minThreadNum &amp;&amp; aliveThreadNum &gt; busyThreadNum * <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 唤醒NUMBER个阻塞的线程并设置需要退出的线程数</span></span><br><span class="line">            <span class="built_in">pthread_mutex_lock</span>(&amp;pool-&gt;m_poolMutex);</span><br><span class="line">            pool-&gt;m_exitThreadNum = NUMBER;</span><br><span class="line">            <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_poolMutex);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUMBER; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">pthread_cond_signal</span>(&amp;pool-&gt;m_consumerCond);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">ThreadPool::worker</span><span class="params">(<span class="keyword">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ThreadPool* pool = (ThreadPool*)arg;</span><br><span class="line">    <span class="comment">// 一直扫任务队列，有任务则做，没有任务则阻塞</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;pool-&gt;m_poolMutex);</span><br><span class="line">        <span class="comment">// 如果任务队列为空</span></span><br><span class="line">        <span class="keyword">while</span> (pool-&gt;m_taskqueue-&gt;<span class="built_in">getSize</span>() == <span class="number">0</span> &amp;&amp; !pool-&gt;m_shutdown) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">pthread_cond_wait</span>(&amp;pool-&gt;m_consumerCond, &amp;pool-&gt;m_poolMutex);</span><br><span class="line">            <span class="keyword">if</span> (pool-&gt;m_exitThreadNum &gt; <span class="number">0</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                pool-&gt;m_exitThreadNum--;</span><br><span class="line">                <span class="keyword">if</span> (pool-&gt;m_aliveThreadNum &gt; pool-&gt;m_minThreadNum)</span><br><span class="line">                &#123;</span><br><span class="line">                    pool-&gt;m_aliveThreadNum--;</span><br><span class="line">                    <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_poolMutex);</span><br><span class="line">                    pool-&gt;<span class="built_in">exitCurrentThread</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果线程池销毁，则销毁当前线程</span></span><br><span class="line">        <span class="keyword">if</span> (pool-&gt;m_shutdown) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_poolMutex);</span><br><span class="line">            pool-&gt;<span class="built_in">exitCurrentThread</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取任务干活</span></span><br><span class="line">        Task newTask = pool-&gt;m_taskqueue-&gt;<span class="built_in">takeTask</span>();</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_poolMutex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增加忙线程数</span></span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;pool-&gt;m_busyThreadMutex);</span><br><span class="line">        pool-&gt;m_busyThreadNum++;</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_busyThreadMutex);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;thread &quot;</span> &lt;&lt; <span class="built_in">to_string</span>(<span class="built_in">pthread_self</span>()) &lt;&lt; <span class="string">&quot; start work&quot;</span> &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">        newTask.<span class="built_in">func</span>(newTask.arg);</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;before: &quot; &lt;&lt; newTask.arg &lt;&lt; &quot;\t&quot; &lt;&lt; to_string(*(int*)(newTask.arg)) &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">free</span>(newTask.arg);</span><br><span class="line">        newTask.arg = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;after: &quot; &lt;&lt; newTask.arg &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// 减少忙线程数</span></span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;pool-&gt;m_busyThreadMutex);</span><br><span class="line">        pool-&gt;m_busyThreadNum--;</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_busyThreadMutex);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;thread &quot;</span> &lt;&lt; <span class="built_in">to_string</span>(<span class="built_in">pthread_self</span>()) &lt;&lt; <span class="string">&quot; end work&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ThreadPool::exitCurrentThread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> currentThreadID = <span class="built_in">pthread_self</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_maxThreadNum; ++i) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_workerThreadIDs[i] == currentThreadID) </span><br><span class="line">        &#123;</span><br><span class="line">            m_workerThreadIDs[i] = <span class="number">0</span>;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;thread &quot;</span> &lt;&lt; <span class="built_in">to_string</span>(currentThreadID) &lt;&lt; <span class="string">&quot; exit&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言线程池</title>
      <link href="/2021/10/10/thread-1/thread-1/"/>
      <url>/2021/10/10/thread-1/thread-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;threadPool.h&quot;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUMBER = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Task</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">void</span> (*function)(<span class="keyword">void</span>* arg);</span><br><span class="line"><span class="keyword">void</span>* arg;</span><br><span class="line">&#125;Task;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程池结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThreadPool</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">// 任务队列</span></span><br><span class="line">Task* TaskQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务队列细节信息</span></span><br><span class="line"><span class="keyword">int</span> queueCapacity;<span class="comment">// 容量</span></span><br><span class="line"><span class="keyword">int</span> queueSize;<span class="comment">// 当前任务数量</span></span><br><span class="line"><span class="keyword">int</span> queueFront;<span class="comment">// 对头</span></span><br><span class="line"><span class="keyword">int</span> queueRear;<span class="comment">// 队尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相应的线程属性</span></span><br><span class="line"><span class="keyword">pthread_t</span> managerID;<span class="comment">// 管理者线程ID</span></span><br><span class="line"><span class="keyword">pthread_t</span>* threadIDs;<span class="comment">// 工作线程ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> maxNum;<span class="comment">// 最大线程数</span></span><br><span class="line"><span class="keyword">int</span> minNum;<span class="comment">// 最小线程数</span></span><br><span class="line"><span class="keyword">int</span> busyNum;<span class="comment">// 忙线程数</span></span><br><span class="line"><span class="keyword">int</span> liveNum;<span class="comment">// 存活线程数</span></span><br><span class="line"><span class="keyword">int</span> exitNum;<span class="comment">// 要销毁的线程数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程池同步</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutexPool;<span class="comment">// 线程池的锁，防止多个线程取出同一个任务 </span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutexBusy;<span class="comment">// 对busyNum的锁</span></span><br><span class="line"><span class="keyword">pthread_cond_t</span> notFull;<span class="comment">// 任务队列是否满了</span></span><br><span class="line"><span class="keyword">pthread_cond_t</span> notEmpty;<span class="comment">// 任务队列是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> shutDown;<span class="comment">// 线程池的销毁，0为不销毁，1为销毁</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadPool* <span class="title">ThreadPoolCreate</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max, <span class="keyword">int</span> queueCapacity)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 分配线程池实例空间</span></span><br><span class="line">ThreadPool* pool = (ThreadPool*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ThreadPool));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pool == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ThreadPool malloc fail...&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分配线程id空间</span></span><br><span class="line">pool-&gt;threadIDs = (<span class="keyword">pthread_t</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">pthread_t</span>) * (<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>)max);</span><br><span class="line"><span class="keyword">if</span> (pool-&gt;threadIDs == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pool-&gt;threadIDs malloc fail...&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化工作线程id</span></span><br><span class="line"><span class="built_in">memset</span>(pool-&gt;threadIDs, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">pthread_t</span>) * (<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>)max);</span><br><span class="line"><span class="comment">// 初始化线程池属性</span></span><br><span class="line">pool-&gt;maxNum = max;</span><br><span class="line">pool-&gt;minNum = min;</span><br><span class="line">pool-&gt;busyNum = <span class="number">0</span>;</span><br><span class="line">pool-&gt;liveNum = min;<span class="comment">// 初始化为最小</span></span><br><span class="line">pool-&gt;exitNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化线程同步锁和条件变量</span></span><br><span class="line"><span class="keyword">if</span> (pthread_mutex_init(&amp;pool-&gt;mutexPool, <span class="literal">NULL</span>) != <span class="number">0</span> ||</span><br><span class="line">pthread_mutex_init(&amp;pool-&gt;mutexBusy, <span class="literal">NULL</span>) != <span class="number">0</span> ||</span><br><span class="line">pthread_cond_init(&amp;pool-&gt;notEmpty, <span class="literal">NULL</span>) != <span class="number">0</span> ||</span><br><span class="line">pthread_cond_init(&amp;pool-&gt;notFull, <span class="literal">NULL</span>) != <span class="number">0</span></span><br><span class="line">) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pool mutex condition fail...&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化任务队列</span></span><br><span class="line">pool-&gt;TaskQueue = (Task*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Task) * (<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>)queueCapacity);</span><br><span class="line"><span class="keyword">if</span> (pool-&gt;TaskQueue == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pool-&gt;TaskQueue malloc fail...&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pool-&gt;queueCapacity = queueCapacity;</span><br><span class="line">pool-&gt;queueSize = <span class="number">0</span>;</span><br><span class="line">pool-&gt;queueFront = <span class="number">0</span>;</span><br><span class="line">pool-&gt;queueRear = <span class="number">0</span>;</span><br><span class="line">pool-&gt;shutDown = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建线程</span></span><br><span class="line">pthread_create(&amp;pool-&gt;managerID, <span class="literal">NULL</span>, manager, pool);<span class="comment">// 管理者线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min; ++i) &#123;</span><br><span class="line">pthread_create(&amp;pool-&gt;threadIDs[i], <span class="literal">NULL</span>, worker, pool);<span class="comment">// 工作者线程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pool;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (pool &amp;&amp; pool-&gt;threadIDs) <span class="built_in">free</span>(pool-&gt;threadIDs);</span><br><span class="line"><span class="keyword">if</span> (pool &amp;&amp; pool-&gt;TaskQueue) <span class="built_in">free</span>(pool-&gt;TaskQueue);</span><br><span class="line"><span class="keyword">if</span> (pool) <span class="built_in">free</span>(pool);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ThreadDestory</span><span class="params">(ThreadPool* pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pool == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭线程池</span></span><br><span class="line">pool-&gt;shutDown = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 阻塞回收线程</span></span><br><span class="line">pthread_join(pool-&gt;managerID,<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 唤醒阻塞的工作消费者线程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pool-&gt;liveNum; ++i) </span><br><span class="line">&#123;</span><br><span class="line">pthread_cond_signal(&amp;pool-&gt;notEmpty);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 销毁锁</span></span><br><span class="line">pthread_mutex_destroy(&amp;pool-&gt;mutexBusy);</span><br><span class="line">pthread_mutex_destroy(&amp;pool-&gt;mutexPool);</span><br><span class="line">pthread_cond_destroy(&amp;pool-&gt;notEmpty);</span><br><span class="line">pthread_cond_destroy(&amp;pool-&gt;notFull);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放堆内存</span></span><br><span class="line"><span class="keyword">if</span> (pool-&gt;TaskQueue)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(pool-&gt;TaskQueue);</span><br><span class="line">pool-&gt;TaskQueue = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pool-&gt;threadIDs) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(pool-&gt;threadIDs);</span><br><span class="line">pool-&gt;threadIDs = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(pool);</span><br><span class="line">pool = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">threadPoolAdd</span><span class="params">(ThreadPool* pool, <span class="keyword">void</span>(*func)(<span class="keyword">void</span>*), <span class="keyword">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line"><span class="keyword">while</span> (pool-&gt;queueSize == pool-&gt;queueCapacity &amp;&amp; !pool-&gt;shutDown)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 阻塞生产者线程</span></span><br><span class="line">pthread_cond_wait(&amp;pool-&gt;notFull, &amp;pool-&gt;mutexPool);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pool-&gt;shutDown) &#123;</span><br><span class="line">pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加任务</span></span><br><span class="line">pool-&gt;TaskQueue[pool-&gt;queueRear].function = func;</span><br><span class="line">pool-&gt;TaskQueue[pool-&gt;queueRear].arg = arg;</span><br><span class="line">pool-&gt;queueRear = (pool-&gt;queueRear + <span class="number">1</span>) % pool-&gt;queueCapacity;</span><br><span class="line">pool-&gt;queueSize++;</span><br><span class="line"></span><br><span class="line">pthread_cond_signal(&amp;pool-&gt;notEmpty);</span><br><span class="line">pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBusy</span><span class="params">(ThreadPool* pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pthread_mutex_lock(&amp;pool-&gt;mutexBusy);</span><br><span class="line"><span class="keyword">int</span> busyNum = pool-&gt;busyNum;</span><br><span class="line">pthread_mutex_unlock(&amp;pool-&gt;mutexBusy);</span><br><span class="line"><span class="keyword">return</span> busyNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAlive</span><span class="params">(ThreadPool* pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line"><span class="keyword">int</span> liveNum = pool-&gt;liveNum;</span><br><span class="line">pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line"><span class="keyword">return</span> liveNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">worker</span><span class="params">(<span class="keyword">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 对线程池类型转化</span></span><br><span class="line">ThreadPool* pool = (ThreadPool*)arg;</span><br><span class="line"><span class="comment">// 不停的读任务队列</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line"><span class="comment">// 判断任务队列是否为空</span></span><br><span class="line"><span class="keyword">while</span> (pool-&gt;queueSize == <span class="number">0</span> &amp;&amp; !pool-&gt;shutDown) &#123;</span><br><span class="line"><span class="comment">//阻塞工作的线程</span></span><br><span class="line">pthread_cond_wait(&amp;pool-&gt;notEmpty, &amp;pool-&gt;mutexPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否销毁</span></span><br><span class="line"><span class="keyword">if</span> (pool-&gt;exitNum &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pool-&gt;exitNum--;</span><br><span class="line"><span class="keyword">if</span> (pool-&gt;liveNum &gt; pool-&gt;minNum)</span><br><span class="line">&#123;</span><br><span class="line">pool-&gt;liveNum--;</span><br><span class="line">pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">threadExit(pool);<span class="comment">// 销毁并归还线程池为0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断线程池是否被关闭了</span></span><br><span class="line"><span class="keyword">if</span> (pool-&gt;shutDown) &#123;</span><br><span class="line">pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">threadExit(pool);<span class="comment">// 销毁并归还线程池为0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从任务队列中取出一个任务</span></span><br><span class="line">Task task;</span><br><span class="line">task.function = pool-&gt;TaskQueue[pool-&gt;queueFront].function;</span><br><span class="line">task.arg = pool-&gt;TaskQueue[pool-&gt;queueFront].arg;</span><br><span class="line"><span class="comment">// 移动对头维护环形队列</span></span><br><span class="line">pool-&gt;queueFront = (pool-&gt;queueFront + <span class="number">1</span>) % pool-&gt;queueCapacity;</span><br><span class="line">pool-&gt;queueSize--;</span><br><span class="line">pthread_cond_signal(&amp;pool-&gt;notFull);</span><br><span class="line">pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread %ld start...\n&quot;</span>, pthread_self());</span><br><span class="line">pthread_mutex_lock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">pool-&gt;busyNum++;</span><br><span class="line">pthread_mutex_unlock(&amp;pool-&gt;mutexBusy);</span><br><span class="line"></span><br><span class="line">task.function(task.arg);</span><br><span class="line"><span class="built_in">free</span>(task.arg);</span><br><span class="line">task.arg = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread %ld end...\n&quot;</span>, pthread_self());</span><br><span class="line">pthread_mutex_lock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">pool-&gt;busyNum--;</span><br><span class="line">pthread_mutex_unlock(&amp;pool-&gt;mutexBusy);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">manager</span><span class="params">(<span class="keyword">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ThreadPool* pool = (ThreadPool*)arg;</span><br><span class="line"><span class="keyword">while</span> (!pool-&gt;shutDown) &#123;</span><br><span class="line"><span class="comment">// 每三秒检测一次</span></span><br><span class="line">sleep(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 取出线程池任务的数量和当前线程的数量</span></span><br><span class="line">pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line"><span class="keyword">int</span> queueSize = pool-&gt;queueSize;</span><br><span class="line"><span class="keyword">int</span> liveNum = pool-&gt;liveNum;</span><br><span class="line">pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出忙线程的数量</span></span><br><span class="line">pthread_mutex_lock(&amp;pool-&gt;mutexBusy);</span><br><span class="line"><span class="keyword">int</span> busyNum = pool-&gt;busyNum;</span><br><span class="line">pthread_mutex_unlock(&amp;pool-&gt;mutexBusy);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加线程</span></span><br><span class="line"><span class="comment">// 任务数&gt;存活线程数 &amp;&amp; 存活线程数&lt;最大线程数</span></span><br><span class="line"><span class="keyword">if</span> (queueSize &gt; liveNum &amp;&amp; liveNum &lt; pool-&gt;maxNum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pool-&gt;maxNum &amp;&amp; counter &lt; NUMBER &amp;&amp;</span><br><span class="line">liveNum &lt; pool-&gt;maxNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pool-&gt;threadIDs[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pthread_create(&amp;pool-&gt;threadIDs[i], <span class="literal">NULL</span>, worker, pool);</span><br><span class="line">counter++;</span><br><span class="line">pool-&gt;liveNum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 销毁线程</span></span><br><span class="line"><span class="comment">// 忙线程*2&lt;存活线程数 &amp;&amp; 存活线程数&gt;最小线程数</span></span><br><span class="line"><span class="keyword">if</span> (busyNum * <span class="number">2</span> &lt; liveNum &amp;&amp; liveNum &gt; pool-&gt;minNum)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">pool-&gt;exitNum = NUMBER;</span><br><span class="line">pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUMBER; ++i)</span><br><span class="line">&#123;</span><br><span class="line">pthread_cond_signal(&amp;pool-&gt;notEmpty);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">threadExit</span><span class="params">(ThreadPool* pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">pthread_t</span> tid = pthread_self();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pool-&gt;maxNum; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (tid == pool-&gt;threadIDs[i])</span><br><span class="line">&#123;</span><br><span class="line">pool-&gt;threadIDs[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread id: %ld exiting...\n&quot;</span>, tid);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于python的opencv图像处理2</title>
      <link href="/2021/10/09/dirname/test/"/>
      <url>/2021/10/09/dirname/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __FACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __FACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;product.hpp&quot;</span></span></span><br><span class="line"><span class="keyword">namespace</span> kkk</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">factoryBase</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> productBase *<span class="title">createProduct</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">factory1</span> :</span> <span class="keyword">public</span> factoryBase</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> productBase *<span class="title">createProduct</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">factory2</span> :</span> <span class="keyword">public</span> factoryBase</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> productBase *<span class="title">createProduct</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试音乐</title>
      <link href="/2021/10/01/%E6%B5%8B%E8%AF%95%E9%9F%B3%E4%B9%90/index/"/>
      <url>/2021/10/01/%E6%B5%8B%E8%AF%95%E9%9F%B3%E4%B9%90/index/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div style="position: relative;width: 100%;height: 0;padding-bottom: 40%;"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=22737627&auto=1&height=66" style="position: absolute;width: 100%;height: 60%;left: 0; top: 0;"></iframe></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试视频</title>
      <link href="/2021/10/01/%E6%B5%8B%E8%AF%95%E8%A7%86%E9%A2%91/index/"/>
      <url>/2021/10/01/%E6%B5%8B%E8%AF%95%E8%A7%86%E9%A2%91/index/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div style="position: relative;width: 100%;height: 0;padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=86848850&bvid=BV1T7411H7NJ&cid=253260227&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 60%;left: 0; top: 0;"> </iframe></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于python的opencv图像处理</title>
      <link href="/2021/10/01/%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA%E6%A8%A1%E5%9D%97/2021-10-1/"/>
      <url>/2021/10/01/%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA%E6%A8%A1%E5%9D%97/2021-10-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;暂无&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
